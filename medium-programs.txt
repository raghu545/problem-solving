1. Detect Capitals:

package medium;

public class DetectCapitals {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
//		Rules:
//		1. Either all chars should be capital or lower
//		2. Only First character of the string should be capital and remaining should be lower
		
		String word = "compuTEr";
		int upperCount=0;
		
		for(int i=0;i<word.length();i++){
			if(word.charAt(i)>='A' && word.charAt(i)<='Z')
				++upperCount;
		}
		
		if(upperCount==word.length() || upperCount==0 || (word.charAt(0)>='A' && word.charAt(0)<='Z') && upperCount==1)
		{
			System.out.println("Valid String: "+word);
		}
		else{
			System.out.println("Invalid String: "+word);
		}

	}

}


2. Group Anangrams:

package medium;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupAnagrams {
	
	public static List<List<String>> groupAnagrams(String[] str){
		List<List<String>> groupAnagrams = new ArrayList<>();
		Map<String, List<String>> map = new HashMap<>();
		
		for(String current: str){
			char[] ch = current.toCharArray();
			Arrays.sort(ch);
			String sorted = new String(ch);
			if(!map.containsKey(sorted)){
				map.put(sorted, new ArrayList<>());
			}
			map.get(sorted).add(current);
		}
		
		groupAnagrams.addAll(map.values());
		return groupAnagrams;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String[] str = {"tea", "ate", "eat", "bat", "mat", "tan", "nat"};
		System.out.println(groupAnagrams(str));
		

	}

}


3. H Index

package medium;

public class HIndex {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] citations = {1,2,5,6};
		int n=citations.length;
		int low=0, high=n-1;
		int mid;
		
		while(low<high){
			mid =(low+high)/2;
			if(n-mid > citations[mid])
				low=mid+1;
			else
				high=mid;
		}
		
		System.out.println(n-low);
		

	}

}


4. Max Population:

package medium;

public class MaxPopulation {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] years = {{1950,1960},{1961,1971},{1972,1982}};
		
		int[] maxPop = new int[100];
		
		for(int i=0;i<years.length;i++){
			int count=0;
			for(int j=years[i][0];j<years[i][1];j++){
				maxPop[j-1950]++;
			}
		}
		int max=maxPop[0];
		int year=0;
		for(int i=1;i<maxPop.length;i++){
			if(max<maxPop[i]){
				max=maxPop[i];
				year=i;
			}
		}
		
		System.out.println(year+1950);
		
	}

}


5. Merge Two Sorted arrays:

package medium;

import java.util.Arrays;

public class MergeTwoSortedArrays {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] a = {1,3,4,5};
		int[] b = {2};
		int[] c = new int[a.length+b.length];
		int i=0,j=0,k=0;
		while(i<a.length && j<b.length){
			if(a[i]<b[j]){
				c[k++]=a[i++];
			}
			else{
				c[k++]=b[j++];
			}
		}
		
		while(i<a.length){
			c[k++]=a[i++];
		}
		
		while(j<b.length){
			c[k++]=b[j++];
		}
		
		System.out.println(Arrays.toString(c));

	}

}


6. Min Railway Platforms:
package medium;

import java.util.Arrays;

public class MinRailwayPlatform {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int arr[] = {900,940,1100,1500,1800};
		int dep[] = {910,1130,1120,1900,2000};
		
		Arrays.sort(arr);
		Arrays.sort(dep);
		int i=0,j=0;
		int max_trains=1, min_platform=1;
		while(i<arr.length){
			if(arr[i]<dep[j]){
				i++;
				max_trains++;
				if(min_platform<max_trains)
					min_platform = max_trains;
			}
			else{
				max_trains--;
				j++;
			}
			
		}
		
		System.out.println(min_platform);
	}

}


7. Next Greater Element to Right:

package medium;

import java.util.Stack;
import java.util.Vector;

public class NextGreaterElement {
	
	
	public static void nextGreaterElementToRight(int[] a){
		Stack<Integer> s = new Stack();
		Vector v = new Vector();
		int size = a.length;
		for(int i=size-1;i>=0;i--){
			if(s.size()==0){
				v.add(-1);
			}
			
			else if(s.size()>0 && s.peek()>a[i]){
				v.add(s.peek());	
			}
			else if(s.size()>0 && s.peek()<=a[i]){
				while(s.size()>0 && s.peek()<=a[i]){
					s.pop();
				}
				if(s.size()==0)
					v.add(-1);
				else if(s.peek()>a[i])
					v.add(s.peek());
			}
			s.push(a[i]);
				
		}
		
		for(int i=v.size()-1;i>=0;i--){
			System.out.println(v.get(i));
		}
	}

	public static void nextGreaterElementToLeft(int[] a){
		Stack<Integer> s = new Stack();
		Vector v = new Vector();
		int size = a.length;
		for(int i=0;i<=size-1;i++){
			if(s.size()==0){
				v.add(-1);
			}
			
			else if(s.size()>0 && s.peek()>a[i]){
				v.add(s.peek());	
			}
			else if(s.size()>0 && s.peek()<=a[i]){
				while(s.size()>0 && s.peek()<=a[i]){
					s.pop();
				}
				if(s.size()==0)
					v.add(-1);
				else if(s.peek()>a[i])
					v.add(s.peek());
			}
			s.push(a[i]);
				
		}
		
		for(int i=0;i<v.size();i++){
			System.out.println(v.get(i));
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] a = {1,3,2,4};
		
		//nextGreaterElementToLeft(a);
		nextGreaterElementToRight(a);
	}

}


8. Next Lower Element:

package medium;

import java.util.Stack;
import java.util.Vector;

public class NextLowerElement {

	public static void nextLowerElementToRight(int[] a){
		Stack<Integer> s = new Stack();
		Vector v = new Vector();
		int size = a.length;
		for(int i=size-1;i>=0;i--){
			if(s.size()==0){
				v.add(-1);
			}
			
			else if(s.size()>0 && s.peek()<a[i]){
				v.add(s.peek());	
			}
			else if(s.size()>0 && s.peek()>=a[i]){
				while(s.size()>0 && s.peek()>=a[i]){
					s.pop();
				}
				if(s.size()==0)
					v.add(-1);
				else if(s.peek()<a[i])
					v.add(s.peek());
			}
			s.push(a[i]);
				
		}
		
		for(int i=v.size()-1;i>=0;i--){
			System.out.println(v.get(i));
		}
	}

	public static void nextGreaterElementToLeft(int[] a){
		Stack<Integer> s = new Stack();
		Vector v = new Vector();
		int size = a.length;
		for(int i=0;i<=size-1;i++){
			if(s.size()==0){
				v.add(-1);
			}
			
			else if(s.size()>0 && s.peek()>a[i]){
				v.add(s.peek());	
			}
			else if(s.size()>0 && s.peek()<=a[i]){
				while(s.size()>0 && s.peek()<=a[i]){
					s.pop();
				}
				if(s.size()==0)
					v.add(-1);
				else if(s.peek()>a[i])
					v.add(s.peek());
			}
			s.push(a[i]);
				
		}
		
		for(int i=0;i<v.size();i++){
			System.out.println(v.get(i));
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] a = {1,3,0,0,1,1,2,4};
		
		//nextGreaterElementToLeft(a);
		nextLowerElementToRight(a);
	}

}


9.Remove adjacent duplicate:

package medium;

public class RemoveAdjacentDuplicate {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String str = "abbaca";
		char[] ch = new char[str.length()];
		char current_char;
		int i=0;
		
		for(int j=0;j<str.length();j++){
			current_char = str.charAt(j);
			
			if(i>0 && ch[i-1]==current_char)
				i--;
			else{
				ch[i]=current_char;
				i+=1;
			}
		}
		
		String res = new String(ch, 0, i);
		System.out.println(res);
	}

}


10.Search in sorted and rotated array:

package medium;

public class SearchInSortedAndRotatedArray {
	
	public static int searchInSortedAndRotatedArray(int[] arr,int key){
		int low =0;
		int high = arr.length-1;
	
		while(low<=high){
			int mid=(low+high)/2;
			if(key==arr[mid])
				return arr[mid];
			if(arr[low]<arr[mid]){
				if(arr[low]<=key && arr[mid]>key)
					high=mid-1;
				else
					low = mid+1;
			}
			else{
				if(key>arr[mid] && key<=arr[high])
					low = mid+1;
				else
					high=mid-1;
			}
			
		}
		
		return -1;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] arr = {20,30,60,90,5,10};
		
		System.out.println(searchInSortedAndRotatedArray(arr,90));

	}

}


11.String compression:

package medium;

import java.util.ArrayList;
import java.util.List;

public class StringCompression {
	
	public static void compressString(String str){
		if(str.length()==1){
			System.out.println(str);
			return;
		}
		List<Character> compList = new ArrayList<>();
		char[] ch = str.toCharArray();
		int i=0,j=0;
		while(i<str.length()){
			j=i;
			while(j<str.length() && ch[i] == ch[j]){
				j++;
			}
			compList.add(ch[i]);
			if(j-i>1){
				
				String count = j-i+"";
				for(char c:count.toCharArray()){
					compList.add(c);
				}
			}
			i=j;
			
		}
		
		compList.forEach(k -> System.out.println(k));
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String str = "abbbbbbbbbbbb";
		compressString(str);
		
		//For string "aabbccc" output has to be a2b2c3
		//For string "a" output has to be a
		//For string "abbbbbbbbbbbb" output has to be ab12
		

	}

}
